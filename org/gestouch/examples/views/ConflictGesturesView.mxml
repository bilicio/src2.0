<?xml version="1.0" encoding="utf-8"?>
<views:ExampleViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:views="org.gestouch.examples.views.*"
	xmlns:controls="org.gestouch.examples.controls.*"
	xmlns:containers="org.gestouch.examples.containers.*"
	implements="org.gestouch.core.IGestureDelegate"
	backgroundColor="0xDDDDDD"
	>
	
	<fx:Script>
		<![CDATA[
			import org.gestouch.core.Touch;
			import org.gestouch.events.GestureEvent;
			import org.gestouch.gestures.Gesture;
			import org.gestouch.gestures.PanGesture;
			import org.gestouch.gestures.RotateGesture;
			import org.gestouch.gestures.ZoomGesture;

			import mx.core.FlexGlobals;
			import mx.core.UIComponent;



			private var gestures:Vector.<Gesture> = new Vector.<Gesture>();
			
			
			public function gestureShouldReceiveTouch(gesture:Gesture, touch:Touch):Boolean
			{
				return true;
			}
			
			
			public function gestureShouldBegin(gesture:Gesture):Boolean
			{
				return true;
			}
			
				
			public function gesturesShouldRecognizeSimultaneously(gesture:Gesture, otherGesture:Gesture):Boolean
			{
				if (gesture.target == otherGesture.target)
				{
					return true;
				}
				
				return false;
			}
			
			
			override protected function onViewActivate():void
			{
				super.onViewActivate();
				
				addGestureToTarget(yellow);
				addGestureToTarget(cyan);
				addGestureToTarget(magenta);
				addGestureToTarget(FlexGlobals.topLevelApplication as InteractiveObject);
			}
			
			
			override protected function onViewDeactivate():void
			{
				super.onViewDeactivate();
				
				for each (var gesture:Gesture in gestures) 
				{
					gesture.dispose();
				}
				
				FlexGlobals.topLevelApplication.transform.matrix = new Matrix();
			}
			
			
			private function addGestureToTarget(target:InteractiveObject):void
			{
				var pan:PanGesture = new PanGesture(target);
				pan.maxNumTouchesRequired = 2;
				pan.delegate = this;
				pan.addEventListener(org.gestouch.events.GestureEvent.GESTURE_BEGAN, onPan);
				pan.addEventListener(org.gestouch.events.GestureEvent.GESTURE_CHANGED, onPan);
				gestures.push(pan);

				var zoom:ZoomGesture = new ZoomGesture(target);
				zoom.addEventListener(org.gestouch.events.GestureEvent.GESTURE_BEGAN, onZoom);
				zoom.addEventListener(org.gestouch.events.GestureEvent.GESTURE_CHANGED, onZoom);
				zoom.delegate = this;
				gestures.push(zoom);
				
				var rotate:RotateGesture = new RotateGesture(target);
				rotate.delegate = this;
				rotate.addEventListener(org.gestouch.events.GestureEvent.GESTURE_BEGAN, onRotate);
				rotate.addEventListener(org.gestouch.events.GestureEvent.GESTURE_CHANGED, onRotate);
				gestures.push(rotate);
				
				if (target is Image)
				{
					(target as Image).setStyle("horizontalCenter", undefined);
					(target as Image).setStyle("verticalCenter", undefined);
				}
			}
			
			
			private function onPan(event:org.gestouch.events.GestureEvent):void
			{
				const gesture:PanGesture = event.target as PanGesture;
				const target:UIComponent = gesture.target as UIComponent;
				
				target.move(target.x + gesture.offsetX, target.y + gesture.offsetY);
			}
			
			
			private function onZoom(event:org.gestouch.events.GestureEvent):void
			{
				const gesture:ZoomGesture = event.target as ZoomGesture;
				const target:UIComponent = gesture.target as UIComponent;
				
				var matrix:Matrix = target.transform.matrix;
				var transformPoint:Point = matrix.transformPoint(target.globalToLocal(gesture.location));
				matrix.translate(-transformPoint.x, -transformPoint.y);
				matrix.scale(gesture.scaleX, gesture.scaleY);
				matrix.translate(transformPoint.x, transformPoint.y);
				target.transform.matrix = matrix;
			}
			
			
			private function onRotate(event:org.gestouch.events.GestureEvent):void
			{
				const gesture:RotateGesture = event.target as RotateGesture;
				const target:UIComponent = gesture.target as UIComponent;
				
				var matrix:Matrix = target.transform.matrix;
				var transformPoint:Point = matrix.transformPoint(target.globalToLocal(gesture.location));
				matrix.translate(-transformPoint.x, -transformPoint.y);
				matrix.rotate(gesture.rotation);
				matrix.translate(transformPoint.x, transformPoint.y);
				target.transform.matrix = matrix;
			}
		]]>
	</fx:Script>
	
	
	<s:Image id="yellow" scaleX="2" scaleY="2"
		source="@Embed(source='/assets/images/YellowSquare.png')"
		horizontalCenter="{-yellow.width}" verticalCenter="{-yellow.height}"
		/>
	<s:Image id="cyan" scaleX="2" scaleY="2"
		source="@Embed(source='/assets/images/CyanSquare.png')"
		horizontalCenter="0" verticalCenter="0"
		/>
	<s:Image id="magenta" scaleX="2" scaleY="2"
		source="@Embed(source='/assets/images/MagentaSquare.png')"
		horizontalCenter="{magenta.width}" verticalCenter="{magenta.height}"
		/>
	
</views:ExampleViewBase>