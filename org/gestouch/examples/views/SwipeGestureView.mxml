<?xml version="1.0" encoding="utf-8"?>
<views:ExampleViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:views="org.gestouch.examples.views.*"
	xmlns:controls="org.gestouch.examples.controls.*"
	xmlns:containers="org.gestouch.examples.containers.*"
	>
	
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			import com.greensock.easing.Sine;

			import org.gestouch.events.GestureEvent;
			import org.gestouch.examples.controls.ArrowShape;
			import org.gestouch.gestures.SwipeGesture;
			import org.gestouch.gestures.SwipeGestureDirection;

			
			
			private var arrow:ArrowShape;
			private var swipe:SwipeGesture;
			
				
			override protected function init():void
			{
				super.init();
				
				arrow = new ArrowShape();
				arrow.scaleX = arrow.scaleY = 50;
				arrow.blendMode = BlendMode.INVERT;
				arrow.alpha = 0;
				arrowContainer.addChild(arrow);
			}
			
			
			override protected function onViewActivate():void
			{
				super.onViewActivate();
				
				swipe = new SwipeGesture(this);
				swipe.addEventListener(org.gestouch.events.GestureEvent.GESTURE_RECOGNIZED, onGesture);
				swipe.addEventListener(org.gestouch.events.GestureEvent.GESTURE_FAILED, onGestureStateChange);
				
				minDistanceSlider.value = swipe.minOffset;
				touchesSlider.value = swipe.numTouchesRequired;
				minVelocitySlider.value = swipe.minVelocity;
				
				leftCheckBox.selected = (swipe.direction & SwipeGestureDirection.LEFT) > 0;
				rightCheckBox.selected = (swipe.direction & SwipeGestureDirection.RIGHT) > 0;
				upCheckBox.selected = (swipe.direction & SwipeGestureDirection.UP) > 0;
				downCheckBox.selected = (swipe.direction & SwipeGestureDirection.DOWN) > 0;
			}
			
			
			override protected function onViewDeactivate():void
			{
				super.onViewDeactivate();
				
				if (swipe)
				{
					swipe.dispose();// all event listeners automatically removed
					swipe = null;
				}
				
				Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;
			}
			

			private function onGesture(event:org.gestouch.events.GestureEvent):void
			{
				const gesture:SwipeGesture = event.target as SwipeGesture;
				
				arrow.scaleX = (gesture.offsetX < 0 && gesture.offsetY == 0 ? -1 : 1) * Math.abs(arrow.scaleX);
				var angle:int = 0;//event.offsetX == 0 ? (event.offsetY > 0 ? 90 : -90) : Math.atan(event.offsetY / event.offsetX) * 180 / Math.PI;
				if (gesture.offsetY != 0)
				{
					angle = gesture.offsetY > 0 ? 90 : -90;
				}
				arrow.rotation = angle;
				TweenMax.fromTo(arrow, 2, {alpha: 1}, {alpha: 0, ease: Sine.easeIn});
			}
			
			
			private function onNativeGesture(event:TransformGestureEvent):void
			{
//				onGesture(new SwipeGestureEvent(SwipeGestureEvent.GESTURE_SWIPE, false, false, GestureState.RECOGNIZED,
//					event.stageX, event.stageY, event.localX, event.localY, event.offsetX, event.offsetY));
			}
			
			
			private function onGestureStateChange(event:org.gestouch.events.GestureEvent):void
			{
				TweenMax.fromTo(failedGraphic, 1, {alpha: 1}, {alpha: 0, ease: Sine.easeIn});
			}
			
			
			private function onMinDistanceSliderChange(event:Event = null):void
			{
				if (swipe)
				{
					swipe.minOffset = minDistanceSlider.value;
				}
			}
			
			
			private function onTouchesSliderChange(event:Event = null):void
			{
				if (swipe)
				{
					swipe.numTouchesRequired = touchesSlider.value;
				}
			}
			
			
			private function onMinVelocitySliderChange(event:Event = null):void
			{
				if (swipe)
				{
					swipe.minVelocity = minVelocitySlider.value;
				}
			}
			
			
			private function onDirectionChange(event:Event = null):void
			{
				var direction:uint;
				if (leftCheckBox.selected)
				{
					direction = direction | SwipeGestureDirection.LEFT;
				}
				if (rightCheckBox.selected)
				{
					direction = direction | SwipeGestureDirection.RIGHT;
				}
				if (upCheckBox.selected)
				{
					direction = direction | SwipeGestureDirection.UP;
				}
				if (downCheckBox.selected)
				{
					direction = direction | SwipeGestureDirection.DOWN;
				}
				swipe.direction = direction;
			}
			
			
			private function onNativeGestureCheckBoxChange(event:Event = null):void
			{
				if (nativeGestureCheckBox.selected)
				{
					Multitouch.inputMode = MultitouchInputMode.GESTURE;
					addEventListener(TransformGestureEvent.GESTURE_SWIPE, onNativeGesture);
				}
				else
				{
					Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;
					removeEventListener(TransformGestureEvent.GESTURE_SWIPE, onNativeGesture);
				}
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<containers:SettingsPanel id="settings">	
			<s:Label text="minDistance"/>
			<s:HSlider id="minDistanceSlider"
				minimum="0" maximum="100" stepSize="1" dataTipPrecision="0"
				change="onMinDistanceSliderChange(event)"/>
			
			<s:Label text="numTouchesRequired"/>
			<s:HSlider id="touchesSlider"
				minimum="1" maximum="3" stepSize="1" dataTipPrecision="0"
				change="onTouchesSliderChange(event)"/>
			
			<s:Label text="minVelocity"/>
			<s:HSlider id="minVelocitySlider"
				minimum="0.2" maximum="2" stepSize="0.05" dataTipPrecision="2"
				change="onMinVelocitySliderChange(event)"/>
			
			<s:Label text="direction"/>
			<s:CheckBox id="leftCheckBox" label="left"
				change="onDirectionChange(event)"/>
			<s:CheckBox id="rightCheckBox" label="right"
				change="onDirectionChange(event)"/>
			<s:CheckBox id="upCheckBox" label="up"
				change="onDirectionChange(event)"/>
			<s:CheckBox id="downCheckBox" label="down"
				change="onDirectionChange(event)"/>
			
			<s:CheckBox id="nativeGestureCheckBox" label="native gesture"
				change="onNativeGestureCheckBoxChange(event)"/>			
			
		</containers:SettingsPanel>
	</fx:Declarations>

	<s:SpriteVisualElement id="arrowContainer" mouseEnabled="false" mouseChildren="false"
		horizontalCenter="0" verticalCenter="0"
		/>

	<s:Graphic id="failedGraphic" alpha="0" mouseEnabled="false" mouseChildren="false"
		horizontalCenter="0" verticalCenter="0"
		>
		<s:Rect width="100" height="100">
			<s:fill>
				<s:SolidColor color="0xCC0000" />
			</s:fill>
		</s:Rect>
	</s:Graphic>
	
</views:ExampleViewBase>